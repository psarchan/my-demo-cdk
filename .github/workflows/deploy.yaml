name: deploy
on:
  push:
   branches:
    - main

# env:
#   account_id: 637423635522
#   region: us-east-1

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install AWS CLI
        run: sudo apt-get update && sudo apt-get install -y awscli
        
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::590183968563:role/centraal-oidc-role
          aws-region: us-east-2
          role-session-name: github-session

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-cdk-build-demo
          COMMIT_HASH: ${{ github.sha }}
        run: |
          IMAGE_TAG=$( echo $COMMIT_HASH | cut -c 1-7)
          cd my-lambda
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Update IMAGE_TAG in SSM Parameter Store
        run: |
          aws ssm put-parameter --name "/my/ecr/build/tag" --value "${{ steps.build-image.outputs.image }}" --type "String" --overwrite
      
      # - name: assume role in cross account
      #   run: aws sts assume-role --role-arn arn:aws:iam::637423635522:role/deploy-role --role-session-name github-session-deploy > assume_role_output.json

      # - name: Set AWS credentials
      #   run: |
      #     export AWS_ACCESS_KEY_ID=$(cat assume_role_output.json | jq -r '.Credentials.AccessKeyId')
      #     export AWS_SECRET_ACCESS_KEY=$(cat assume_role_output.json | jq -r '.Credentials.SecretAccessKey')
      #     export AWS_SESSION_TOKEN=$(cat assume_role_output.json | jq -r '.Credentials.SessionToken')


      # - name: list s3 bucket in cross account
      #   run: aws s3 ls
